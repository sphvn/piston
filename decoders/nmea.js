// Generated by LiveScript 1.2.0
(function(){
  var ref$, dropWhile, takeWhile, span, drop, length, exspan, buffer, unpack, invalid, checksum;
  ref$ = require('prelude-ls').Str, dropWhile = ref$.dropWhile, takeWhile = ref$.takeWhile, span = ref$.span;
  drop = require('prelude-ls').drop;
  length = function(it){
    return it.length;
  };
  exspan = function(c, xs){
    var ref$, x, y;
    ref$ = span((function(it){
      return it !== c;
    }), xs), x = ref$[0], y = ref$[1];
    return [x, drop(length(c), y)];
  };
  buffer = "";
  this.bufferSize = length(buffer);
  this.flush = function(){
    return buffer = "";
  };
  this.receive = function(chunk){
    var ref$, buf, msg;
    if (this.bufferSize > 16000) {
      flush();
    }
    ref$ = unpack(buffer, chunk), buf = ref$[0], msg = ref$[1];
    buffer = buf;
    return msg;
  };
  unpack = function(buf, chunk){
    var _buf, ref$, msg;
    _buf = dropWhile((function(it){
      return it !== "$";
    }), buf + chunk);
    if (_buf.indexOf("\r") === -1) {
      return [_buf, null];
    }
    ref$ = span((function(it){
      return it !== "\r";
    }), _buf), msg = ref$[0], _buf = ref$[1];
    switch (false) {
    case msg[0] !== "$":
      return [_buf, msg];
    default:
      return [_buf, null];
    }
  };
  this.decode = function(msg){
    var _msg, ref$, checksum, talkerId, heading, headingType, _;
    _msg = drop(1, msg);
    ref$ = exspan('*', _msg), _msg = ref$[0], checksum = ref$[1];
    if (invalid(checksum, _msg)) {
      return null;
    }
    ref$ = exspan(',', _msg), talkerId = ref$[0], _msg = ref$[1];
    ref$ = exspan(',', _msg), heading = ref$[0], _msg = ref$[1];
    ref$ = exspan('*', _msg), headingType = ref$[0], _ = ref$[1];
    return {
      talkerId: talkerId,
      heading: heading,
      headingType: headingType,
      checksum: checksum
    };
  };
  invalid = function(cs, msg){
    return checksum(msg) !== cs;
  };
  checksum = function(xs){
    var x, i$, to$, i, hex;
    x = 0;
    for (i$ = 0, to$ = xs.length - 1; i$ <= to$; ++i$) {
      i = i$;
      x = x ^ xs.charCodeAt(i);
    }
    hex = Number(x).toString(16).toUpperCase();
    if (hex.length < 2) {
      return ('00' + hex).slice(-2);
    } else {
      return hex;
    }
  };
}).call(this);
