// Generated by LiveScript 1.2.0
(function(){
  var ref$, dropWhile, takeWhile, span, buffer, unpack;
  ref$ = require('prelude-ls').Str, dropWhile = ref$.dropWhile, takeWhile = ref$.takeWhile, span = ref$.span;
  buffer = "";
  this.bufferSize = buffer.length;
  this.flush = function(){
    return buffer = "";
  };
  this.receive = function(chunk){
    var ref$, buf, msg;
    if (this.bufferSize > 16000) {
      flush();
    }
    ref$ = unpack(buffer, chunk), buf = ref$[0], msg = ref$[1];
    buffer = buf;
    return msg;
  };
  unpack = function(buf, chunk){
    var _buf, ref$, msg;
    _buf = dropWhile((function(it){
      return it !== "$";
    }), buf + chunk);
    if (_buf.indexOf("\r") === -1) {
      return [_buf, null];
    }
    ref$ = span((function(it){
      return it !== "\r";
    }), _buf), msg = ref$[0], _buf = ref$[1];
    switch (false) {
    case msg[0] !== "$":
      return [_buf, msg];
    default:
      return [_buf, null];
    }
  };
  this.decode = function(msg){
    return msg;
  };
}).call(this);
