// Generated by LiveScript 1.3.1
(function(){
  $(function(){
    var host, connect, chart, setRange, setAutoRange, autoYRange, data, plot, appendPlot, addSeries, parseFloatStrict, findValues, prefixName, fixUnits, rad2deg, preferredUnits, capitalize, nextColor, palette, sortLi;
    prelude.installPrelude(window);
    host = location.protocol === "file:"
      ? "localhost"
      : location.hostname;
    connect = function(){
      var socket, disconnected;
      socket = new WebSocket("ws://" + host + ":8000/");
      socket.onopen = function(){
        return $('.status').text('Connected');
      };
      disconnected = function(){
        return $('.status').text('Disconnected');
      };
      disconnected();
      socket.onclose = function(){
        disconnected();
        return connect();
      };
      socket.onmessage = function(msg){
        var obj;
        obj = JSON.parse(msg.data);
        return plot(obj.talker + "" + obj.sentence, obj);
      };
    };
    chart = new SmoothieChart({
      interpolation: 'line',
      millisPerPixel: 30,
      grid: {
        fillStyle: 'transparent',
        sharpLines: true,
        millisPerLine: 5000,
        verticalSections: 0
      },
      horizontalLines: [{
        color: '#777',
        lineWidth: 1,
        value: 0
      }]
    });
    setRange = function(c, min, max){
      c.options.scaleSmoothing = 1;
      c.options.minValue = min;
      c.options.maxValue = max;
      return c.options.yRangeFunction = null;
    };
    setAutoRange = function(c){
      c.options.scaleSmoothing = 0.3;
      c.options.minValue = null;
      c.options.maxValue = null;
      return c.options.yRangeFunction = autoYRange;
    };
    autoYRange = function(range){
      var m;
      if (range.min < 0) {
        m = max(abs(range.min), abs(range.max));
        m = m * 1.25;
        return {
          min: -m,
          max: m
        };
      } else {
        return {
          min: 0,
          max: range.max * 1.25
        };
      }
    };
    chart.streamTo(document.getElementById('chart'), 1000);
    setAutoRange(chart);
    (function(){
      var canvas, ups, downs, mouseDown, mousePosition, dragging, zoomOutFactor, zoomInFactor, zoomOutLocation, doZoom;
      canvas = $('#chart');
      ups = $(document).asEventStream('mouseup').map(false);
      downs = canvas.asEventStream('mousedown').map(true);
      mouseDown = downs.merge(ups).toProperty(false);
      mousePosition = $(document).asEventStream('mousemove').map(function(e){
        return {
          x: e.clientX,
          y: e.clientY
        };
      });
      dragging = mousePosition.diff({
        dx: 0,
        dy: 0
      }, function(a, b){
        return {
          dx: b.x - a.x,
          dy: b.y - a.y
        };
      }).filter(mouseDown);
      dragging.onValue(function(m){
        var moveRel, max, ref$, min, move;
        moveRel = m.dy / canvas.height();
        max = (ref$ = chart.options.maxValue) != null
          ? ref$
          : chart.valueRange.max;
        min = (ref$ = chart.options.minValue) != null
          ? ref$
          : chart.valueRange.min;
        move = moveRel * (max - min);
        return setRange(chart, min + move, max + move);
      });
      canvas.dblclick(function(){
        return setAutoRange(chart);
      });
      zoomOutFactor = 1.5;
      zoomInFactor = 1 / zoomOutFactor;
      zoomOutLocation = null;
      canvas.mousewheel(function(e, delta){
        var clicks, zoomIn, location, y, zoomOutLocation;
        clicks = abs(delta);
        zoomIn = delta > 0;
        location = {
          x: e.offsetX,
          y: e.offsetY
        };
        if (zoomIn) {
          y = location !== zoomOutLocation ? location.y : null;
          doZoom(zoomInFactor, y);
        } else {
          zoomOutLocation = location;
          doZoom(zoomOutFactor);
        }
        return false;
      });
      return doZoom = function(factor, y){
        var zoomPosRel, min, max, range, above, below, zoomPos, newAbove, newBelow, newMin, newMax;
        zoomPosRel = y != null ? zoomPosRel = y / canvas.height() : 0.5;
        min = chart.valueRange.min;
        max = chart.valueRange.max;
        range = max - min;
        above = range * zoomPosRel;
        below = range * (1 - zoomPosRel);
        zoomPos = max - above;
        newAbove = factor * above;
        newBelow = factor * below;
        newMin = zoomPos - newBelow;
        newMax = zoomPos + newAbove;
        setRange(chart, newMin, newMax);
      };
    })();
    data = [];
    plot = function(sender, msg){
      appendPlot(sender, new Date(), msg);
    };
    appendPlot = function(sender, time, obj){
      var i$, ref$, len$, x, series, results$ = [];
      for (i$ = 0, len$ = (ref$ = map(fixUnits, findValues(obj))).length; i$ < len$; ++i$) {
        x = ref$[i$];
        series = addSeries(sender, x.units, x.name);
        results$.push(series.append(time, x.value));
      }
      return results$;
    };
    addSeries = function(sender, units, name){
      var key, series, color;
      key = sender;
      if (name != null) {
        key += "/" + name;
      }
      series = data[key];
      if (series == null) {
        series = new TimeSeries;
        color = nextColor(Object.keys(data).length);
        chart.addTimeSeries(series, {
          strokeStyle: color,
          lineWidth: 3
        });
        $('ul.legend').append("<li>\n  <i class='icon-circle' style='color: " + color + "'/>\n  " + key.replace('<', '&lt;').replace('>', '&gt;') + "\n</li>");
        data[key] = series;
        sortLi('ul.legend');
      }
      return series;
    };
    parseFloatStrict = function(x){
      if (/^\-?[0-9]+(\.[0-9]+)?[ a-zA-Z]*$/.test(x)) {
        return parseFloat(x);
      } else {
        return NaN;
      }
    };
    findValues = function(obj){
      var x, vs, k, v;
      switch (false) {
      case typeof obj !== 'number':
        return [{
          value: obj,
          units: 'unknown'
        }];
      case typeof obj !== 'string':
        x = parseFloatStrict(obj);
        if (isNaN(x)) {
          return [];
        } else {
          return [{
            value: x,
            units: 'unknown'
          }];
        }
        break;
      case !!(obj instanceof Object):
        return [];
      default:
        vs = [];
        for (k in obj) {
          v = obj[k];
          if (v != null) {
            if (v.value != null && v.units != null) {
              x = {
                value: v.value,
                units: v.units
              };
              vs = vs.concat(prefixName(k, x));
            } else {
              vs = vs.concat(map(prefixName(k), findValues(v)));
            }
          }
        }
        return vs;
      }
    };
    prefixName = curry$(function(pre, obj){
      var ref$;
      switch (false) {
      case pre !== 'value':
        return obj;
      case pre !== 'nameValuePairs':
        return obj;
      case obj.name != null:
        return ref$ = clone$(obj), ref$.name = capitalize(pre), ref$;
      default:
        return ref$ = clone$(obj), ref$.name = capitalize(pre) + "/" + obj.name, ref$;
      }
    });
    fixUnits = function(x){
      var p, ref$;
      p = preferredUnits[x.units];
      switch (false) {
      case p == null:
        return ref$ = clone$(x), ref$.units = p.name, ref$.value = p.convert(x.value), ref$;
      default:
        return x;
      }
    };
    rad2deg = (function(it){
      return it * 57.2957795;
    });
    preferredUnits = {
      'rad': {
        name: 'deg',
        convert: rad2deg
      },
      'rad/s': {
        name: 'deg/s',
        convert: rad2deg
      }
    };
    capitalize = function(xs){
      return head(xs).toUpperCase() + tail(xs);
    };
    nextColor = function(i){
      return palette[i % palette.length];
    };
    palette = ['#336699', '#99CCFF', '#999933', '#666699', '#CC9933', '#006666', '#3399FF', '#993300', '#CCCC99', '#666666', '#FFCC66', '#6699CC', '#663366', '#9999CC', '#CCCCCC', '#669999', '#CCCC66', '#CC6600', '#9999FF', '#0066CC', '#99CCCC', '#999999', '#FFCC00', '#009999', '#99CC33', '#FF9900', '#999966', '#66CCCC', '#339966', '#CCCC33'];
    sortLi = function(selector){
      var items, ul;
      items = $(selector + " li").get();
      items.sort(function(a, b){
        var keyA, keyB;
        keyA = $(a).text();
        keyB = $(b).text();
        if (keyA < keyB) {
          return -1;
        }
        if (keyA > keyB) {
          return 1;
        }
        return 0;
      });
      ul = $(selector);
      return $.each(items, function(i, li){
        return ul.append(li);
      });
    };
    connect();
  });
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
