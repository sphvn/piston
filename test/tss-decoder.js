// Generated by LiveScript 1.2.0
(function(){
  var codec, moment, should;
  codec = require("../decoders/tss.js");
  moment = require('moment');
  should = require('chai').should();
  describe('the tss.receive', function(_){
    it('should return the message when the chunk is the message', function(done){
      var expected, given, result;
      codec.flush();
      expected = [":123456 123456 123456 -1234?-1234 -1234"];
      given = expected + "\r";
      result = codec.receive(given);
      result.should.eql(expected);
      return done();
    });
    it('should return the message when the chunk contains the message', function(done){
      var expected, given, result;
      codec.flush();
      expected = [":123456 123456 123456 -1234?-1234 -1234"];
      given = " 2222\r" + expected + "\r:654321";
      result = codec.receive(given);
      result.should.eql(expected);
      return done();
    });
    it('should return the message from multiple chunks', function(done){
      var expected, msg1, msg2, msg3, msg4, result;
      codec.flush();
      expected = [":123456 123456 123456 -1234?-1234 -1234"];
      msg1 = " 2222\r";
      msg2 = ":123456 123456 ";
      msg3 = "123456 -1234?-1234 -1234";
      msg4 = "\r:654321";
      result = codec.receive(msg1);
      result = codec.receive(msg2);
      result = codec.receive(msg3);
      result = codec.receive(msg4);
      result.should.eql(expected);
      return done();
    });
    it('should return messages when multiple messages in a chunk', function(done){
      var expected, given, result;
      codec.flush();
      expected = [":123456 123456 123456 -1234?-1234 -1234", ":123456 123456 123456 -1234?-1234 -1234"];
      given = ":123456 123456 123456 -1234?-1234 -1234\r:123456 123456 123456 -1234?-1234 -1234\r";
      result = codec.receive(given);
      result.should.eql(expected);
      return done();
    });
    it('should flush the buffer if it reaches 16k', function(done){
      var i$, _, m, result;
      codec.flush();
      for (i$ = 0; i$ <= 16000; ++i$) {
        _ = i$;
        m = codec.receive('0');
      }
      result = codec.bufferSize();
      result.should.equal(0);
      return done();
    });
    it('should handle a null character in chunk', function(done){
      var expected, result, expected_, result_;
      codec.flush();
      expected = [":123456 123456 123456 -1234?-1234 -1234"];
      result = codec.receive(expected + "\rA\0Z");
      result.should.eql(expected);
      codec.flush();
      expected_ = [":123456 123456 123456 -1234?-1234\0 -1234"];
      result_ = codec.receive(expected_ + "\r");
      result_.should.eql(expected_);
      return done();
    });
    return it('should handle a null chunk', function(done){
      var expected, result;
      codec.flush();
      expected = null;
      result = codec.receive(expected);
      (result === expected).should.equal['true'];
      return done();
    });
  });
  describe('the tss.decode', function(_){
    return it('should return the decoded Sounder message', function(done){
      var given, expected, result;
      given = ":123456 123456 123456 -1234?-1234 -1234";
      expected = {
        talker: "",
        sentence: "TSS-Sounder",
        identifier: "123456",
        depth: 1234.56,
        corrDepth: 1234.56,
        heave: -12.34,
        quality: "?",
        roll: -12.34,
        pitch: -12.34
      };
      result = codec.decode(given);
      result.should.eql(expected);
      return done();
    });
  });
}).call(this);
